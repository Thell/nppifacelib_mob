/* NppPluginIface_Markers.h
 *
 * This file is part of the Notepad++ Plugin Interface Lib.
 * Copyright 2008 - 2009 Thell Fowler (thell@almostautomated.com)
 *
 * This program is free software; you can redistribute it and/or modify it under the terms of
 * the GNU General Public License as published by the Free Software Foundation; either version
 * 2 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License along with this program;
 * if not, write to the Free Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

/*
 *  Notepad++ Plugin Interface Lib extension providing helper functions for implementing
 *  Scintilla LineMarker symbol management and margin control within a Notepad++ plugin.
 *
 */

#ifndef NPP_PLUGININTERFACE_MARKERS_EXTENSION_H
#define NPP_PLUGININTERFACE_MARKERS_EXTENSION_H

#include "NppPluginIface.h"

#include "Platform.h"

namespace npp_plugin {

//  Namespace extension for plugin symbol marker and margin management.
//
//  N++ marker allotment:
//		const int MARK_BOOKMARK = 24; 
//		const int MARK_HIDELINESBEGIN = 23; 
//		const int MARK_HIDELINESEND = 22; 
//		// 24 - 16 reserved for Notepad++ internal used 
//		// 15 - 0 are free to use for plugins 
//
//  Ref thread: https://sourceforge.net/forum/forum.php?thread_id=2984130&forum_id=482781

namespace markers {

const int NB_MAX_PLUGINMARKERS = 16;
const int SC_MARK_AVAILABLE = 28;

//  Actions for Plugin Line Markers stored in the history tracker.
enum PLM_ACTION {
	PLM_MARKERADD,		// Used to match up with SCI_MARKERADD
	PLM_MARKERDELETE,	// Used to match up with SCI_MARKERDELETE
	PLM_MARKERFORWARD,	// Marker already exists on the line and is reused in a new action.
	PLM_SAVEPOINT,		// Scintilla Document savepoint.
};

//  N++ Margins
enum MARGIN {
	MARGIN_NONE = -1,
	MARGIN_LINENUMBER,
	MARGIN_BOOKMARK,
	MARGIN_FOLD,
	MARGIN_RESERVED,
	MARGIN_PLUGIN,
	NB_MARGINS
};

	//  Un-named namespace for private class/struct/variables.  Mainly used to keep the
	//  interface clean.
	//namespace {

		//  Margin control class.
		class Margin
		{
			MARGIN _target;
			MARGIN _prevTarget;
			void setMasks( int markerID );

		public:
			void setTarget(MARGIN target, int markerID);
			MARGIN getTarget() { return _target; };
			void restorePrevTarget( int markerID );

			Margin():_target(MARGIN_BOOKMARK), _prevTarget(MARGIN_BOOKMARK){};
		};

	// }  // End: un-named namespace

//  This class provides the structure and functions that allow for a plugin to interact with
//  Notepad++ and Scintilla to handle marker configuration and action tracking.
struct Plugin_Line_Marker {
	// Marker base items.
	int id;
	int type;
	COLORREF back;
	COLORREF fore;
	int alpha;

	//  <--- XPM --->
	//  The Scintilla PIXMAP setup expects a char** so to get from a file generated by an icon
	//  creator to the marker the text array is read from a standard XPM file into the first
	//  vector and then the second vector is populated with pointers to those strings and the
	//  value is sent to Scintilla as an array.
	tstring xpmFileName;
	bool getXpmDataFile();
	int XpmFile2Buffer( TCHAR filename[MAX_PATH] );
	std::vector<std::string> xpmFields;			//  Data read in from file.
	std::vector<const char *> pXpmFields;		//  Allows passing of char** to Scintilla
	const char** getXpmData();

	//  Values to help plugins control internal behaviour. (Not used within class).
	bool trackUNDOREDO;
	bool active;
	bool display;

	Margin margin;
	void init( int markerNumber );
};

int * getAvailableMarkers( int nb_markers_needed );
void setMarkerAvailable( int markerNumber );

int string2marker(tstring string);
int string2margin(tstring szMargin);
tstring margin2string(int margin);

} //  End namespace: markers

}  // End Namespace: npp_plugin

#endif // End include guard:  NPP_PLUGININTERFACE_MARKERS_EXTENSION_H